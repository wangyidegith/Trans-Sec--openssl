零 整体：看图片







一 每次握手都发了什么信息
（零）第一次握手
0 客户端发送一个 ClientHello 消息，包含以下信息：
（0）支持的 TLS 版本。
（1）支持的加密套件（cipher suites）。
（2）支持的压缩方法。
（3）生成的随机数（random nonce）。
（4）可选的扩展信息（如服务器名称指示 SNI）。



（一）第二次握手
0 服务器响应一个 ServerHello 消息，包含以下信息:
（0）选择的 TLS 版本。
（1）选择的加密套件。
（2）选择的压缩方法。
（3）生成的随机数（random nonce）。
（4）其他的扩展信息。

1 cert：服务器证书和中间证书，总之就是一个证书链。

2 ServerHelloDone
服务器发送 ServerHelloDone 消息，表示服务器的消息已发送完毕，等待客户端响应。
注意：没有ClientHelloDone。

# 上面两个是必选项，下面是可选项

2 ServerKeyExchange（可选）：如果选择的加密套件需要额外的密钥交换信息（比如使用 Diffie-Hellman 或 ECDHE），服务器将发送 ServerKeyExchange 消息，包含所需的参数。

3 CertificateRequest（可选）
如果服务器希望客户端提供证书进行身份验证，它会发送 CertificateRequest 消息，要求客户端发送其证书。

4 我曾经对第二次握手产生过很长一段时间的误解：我以为第二次握手会发送一个使用服务器证书对应的私钥的签名以让客户端验证服务器的身份，但是这怎么能验证身份呢？如果一个钓鱼网站采用了自签证书一样可以使用私钥进行签名，所以这个签名是完全没有必要的，验证服务器身份靠的是证书验证。



# 第二次握手和第三次握手之间，客户端会做证书验证。



（二）第三次握手
0 ClientKeyExchange
客户端生成一个随机数（称为 pre-master secret），并使用服务器的公钥加密后发送给服务器。这一随机数将用于生成会话密钥。

1 ChangeCipherSpec
客户端发送 ChangeCipherSpec 消息，告知服务器后续的消息将使用刚刚协商的加密算法和密钥加密。

2 Finished
客户端发送 Finished 消息，包含对之前所有握手消息的哈希，加密后发送给服务器，表明握手完成。

3 cert（可选）：取决于服务器是否要求发送证书。
注意：基于B/S结构的web程序一般是单向认证，我想这是因为如果要做双向认证，浏览器需要获得可被服务器验证的证书，而证书需要对应私钥，所以私钥从哪来呢？私钥当然是从客户这来，a 不管是浏览器生成还是怎么，既然如此，黑客本身也是用户啊，那么，这就没有意义（称此问题为根本问题），b 如果不让浏览器自行生成而由客户去申请去认证首先这很麻烦其次这还是摆脱不了根本问题，c 更何况，浏览器这边对于证书使用的控制并不容易做，如果浏览器强制使用证书，那么服务器不一定支持，如果不强制呢？服务器也可能支持啊。但是sv-server的主要应用场景（之所以说主要是因为也能做服务器认证，但是一般不用）正是web程序缺失的客户端认证，比如UKey，比如ssh私钥登录。



（三）第四次握手
0 ChangeCipherSpec
服务器接收到客户端的 Finished 消息后，发送自己的 ChangeCipherSpec 消息，表示接下来会使用协商的算法和密钥。

1 服务器的 Finished
服务器也发送 Finished 消息，确认握手完成。

