零 主要应用场景
非对称加密比对称加密慢了好几个数量级，因而一般不使用其作为一次一密即常规数据的算法，其主要用途在：
1 密钥加密：比如tls第三次握手中，客户端使用服务器在第二次握手中发来的公钥给premaster-secret加密。

2 数字签名：这是最主要的应用场景。







一 数字签名
（一）证明方签名
1 准备如下信息：
（1）要签名的原始信息；
（2）保存数字签名的内存；
（3）私钥；
（4）要使用的哈希算法。

2 calc-hash = hash(要签名的原始信息);

3 sign（RSA_sign的实现原理）
使用私钥加密原始信息得到签名。



（二）验证方验签
1 准备如下信息：
（1）被签名的原始信息；
（2）生成的数字签名；
（3）证明方的公钥；
（4）证明方使用的哈希算法。

2 calc-hash = hash(被签名的原始信息);

3 verify（RSA_verify的实现原理）
（1）使用证明方公钥解密签名，拿到trans-hash；
（2）cmp(trans-hash, calc-hash)；   // 一致可证明对端真实性、报文完整性、防止对端抵赖，不一致则验签失败，疑被攻击

