零 PKC概念
（零）本文档讲的应用不以应用场景为主，而以普遍的态度考虑PKC的应用。



（一）PKC（加解密和数字签名（保证了真实性、完整性、不可否认性）两大功能）应用，主要包括两个部分：
0 PKI（Public Key Infrastructure）：提供合法性。

注意：其实PKI设计的初衷是给PKC提供基础，因而要意识到它是通用的而不仅仅用于做认证，比如数字信封就是加解密。

1 认证（也叫鉴别、鉴权、验签，总之就是authentication）：确定通信对端的真实性。

2 证书详细介绍。







一 PKI
（零）通俗理解
0 服务器认证在于让客户端认证服务器的合法性，你去一个商店购物你怎么确保这家单位是合法的而不是人贩窝点，或者你去一家银行办理业务你怎么确保这是一家合法的银行而不是骗子银行；

1 客户端认证在于让服务器认证客户端是授权用户，一家商店有会员有非会员，商店要确认客户端的权限以提供相应的信息和服务，或者你去银行办理业务，银行要确认你具备办理某业务的权限，至少银行会看你的身份证吧。

2 但是：PKI虽然作为authority，不代表就能过滤所有的恶意证书，哪怕是在这河清海晏的中华盛世，又有多少非法企业呢？



（一）通过PKI体系的主要要素理解其工作原理
0 基本要素
（0）数字证书（一般简称证书）
a PKI的基本单位；
b 对应一个私钥；
c 概念：由证书颁发机构（CA）签发的电子文档，用于证明公钥的所有者身份。
d 证书是整个PKC的核心，不管在PKI还是在认证中都有需要说的概念，我将单开一个文档去说它。
（1）公私钥对
a 公钥构成证书的核心部分（可以去看看X509证书的格式，公钥是很重要的一部分），和私钥一一对应。
b 这里涉及密钥管理问题即证书和私钥如何存储如何备份恢复如何导入导出。

1 三大体系
（0）注册机构（RA）：负责接收用户的csr，验证用户的合法性，验证通过之后将csr移交CA。
（1）证书颁发机构（CA）：负责签发（签署（就是签名）、颁发）证书。（这里就涉及CA如何给证书签名的问题，请见后面关于证书的介绍）
（2）验证机构VA：证书撤销列表（CRL）和在线证书状态协议（OCSP）：用于有效性验证，即列出已被撤销的证书，供用户查询。
注意：这里我们要说一个长期以来一直含糊不清的概念：CA到底指谁？广义上CA指整个PKI实体，狭义上指证书颁发机构，RA又叫小CA，VA其实一般就直接说CRL、OCSP了，另外CA（certificate authority）的汉语名直译应该叫证书机构，我觉得这个名字很好，说明了PKI实体的特征即“证书权威”，实际上，这个名字里根本没有“机构”，但是中国人总是愿意叫它证书颁发机构、认证中心、证书注册机构，你知道这些名字是在说CA就行了。







二 认证
（零）服务器认证
0 概念：客户端认证服务器

1 理解：客户端希望自己访问的服务器不是一个恶意网站。（其实也防不住，因为网站可以通过伪装、花钱、走关系等方式申请到位于浏览器信任存储中的根证书所属CA的证书，但至少避免了自签证书的滥用，而且可以有效防止sslstrip）

2 应用场景：TLS

3 认证策略
（0）服务器需要提供什么材料：证书

（1）客户端的认证策略：验签 + 有效期 + 状态 + 域名 + 其他扩展字段



（一）客户端认证
0 概念：服务器认证客户端

1 理解：服务器希望访问自己的客户端是经过授权的，说白了就是注册登录。

2 客户端认证的发展历史（应用场景，就是登录，会话管理属于一种特殊的登录）
（0）口令登录
a 从日常来看：注册 + 登录 + 注销 + 找回密码，这一整套都是认证技术。
b 认证的元素：账户 = 账号（用户名） + 密码
c 账号的特性：唯一性。多为手机号，有的系统会要求用户自定义用户名。
d 密码的特性：不可见性。密码的本质在于为了证明某个实体拥有访问某个实体的权限，所以这一点决定了密码的不可见性。
e 现在使用手机验证码作为密码登录的情况是最多见的。
f 安全性：登录从最根本上说是一次TCP连接，而TCP连接无法被限制，这导致暴力破解具备可行性。
（1）用于维持登录状态的认证（会话管理）
cookie：用户携带着服务器分配给用户的仅有用户自己知道的信息到服务器，服务器会在数据库里面查有没有这个信息，有那就说明登录了，没有就让用户去用用户名和密码登录。
（2）数字签名（消息签名）
a 验签的原理就是私钥只可能被一个实体知晓，所以只要用这个实体的公钥解密成功那么就说明确实是这个实体。（这就是为什么JWT是不需要存储任何状态的）
b 应用场景：
（a）ssh私钥登录（挑战-响应协议）；
`
sshc向sshd注册：sshc需要生成一对公私钥对，将公钥复制到sshd的~/.ssh/authorized_keys文件中（这相当于注册）。
sshc发起登录请求。
sshd响应一个nonce。
sshc使用其私钥加密nonce发给sshd。
sshd在~/.ssh/authorized_keys文件中依次使用该文件中记录的公钥尝试解密nonce密文，将解密拿到的nonce和保存的nonce比较，相等则验证成功，否则验证失败。
注意：
关于sshd的验证过程，说白了就是找匹配公钥的过程，因而ssh私钥登录的可行性在于黑客没法把公钥放到用户的~/.ssh/authorized_keys文件里。
验证成功后，sshd使用用户公钥加密对称密钥发给sshc。
sshc使用其私钥解密得到对称密钥。
好了可以就开始愉快的通信了。
`
（b）JWT；JWT用于会话管理，也就是browser登录server后，JWT和cookie的关键区别在于cookie认证中server需要存储一张每个客户端的cookie列表，但是JWT不需要而仅仅存一对公私钥对即可。
`
browser登录成功后，server生成jwt{header[token_type(jwt), hash_alg(hmac-sha256)], payload[user_id, outdate, self-define], signature[use privatekey encypt header and payload]}，将jwt响应给browser。
browser将jwt进行本地存储，
下次访问某资源时无需再次登录而是带着jwt过去（http头设置Authorization: Bearer <token>），
server验证jwt，包括验签（至于说比对什么，取决于程序员自行发挥）和验证有效期。
`
（c）UKey登录。
（3）hamc认证即预共享密钥（PSK）认证。
c 安全性：数字签名使得暴力破解不具备可行性。

3 认证策略
（0）登录认证
A ukey登录
a 客户端需要提供什么材料：对于服务器给的随机数的签名 + 证书
b 服务器的验证策略：
验证客户提供的证书是否在信任列表里（这一步必须有，不能只验签，因为客户端可以自己去ca申请合法证书） + 有效期 + 证书状态 + 验签（有个问题，其实验证完前面的就已经可以让客户端登录了，那么，验签的意义在哪呢？我想应该是为了完整性（防御中间人攻击）和抗抵赖）
B ssh私钥登录
c 客户端需要提供什么材料：原文 + 签名
b 服务器的验证策略：验签
（1）会话认证（能到会话这个阶段，说明已经登录过了，就是JWT）：
a 客户端需要提供什么材料：业务数据 + 对业务数据的签名
b 服务器的验证策略：验签



（二）客户端认证和服务器认证的区别
0 首先你应该从应用场景上理解二者的区别，这也是本质区别，即虽然认证都是为了验证对端的真实性（所谓真实性即确保自己确实是在和自己想要通信的对端进行通信），但是服务器认证是在确保自己不入狼窝，客户端认证是为了确保权限鉴别。

1 从技术细节上看，客户端认证是消息签名，服务器认证是数字签名，
具体而言，
服务器给到客户端的认证材料是带着证书的，客户端没有服务器的证书而只有信任存储，服务器在给材料时不做数字签名（没必要），
客户端给到服务器的认证材料是不带证书的，服务器是存着客户端证书的，客户端是要做消息签名的（为了验签）。







三 证书详细介绍
（零）证书格式：X509是证书格式的事实标准。
0 以下是一个X509证书的示例
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number: 1591942200409 (0x172a7263c59)
        Signature Algorithm: sha256WithRSAEncryption
        Issuer: C = CN, O = GMSSL, OU = PKI/RSA, CN = RootCA for Test
        Validity
            Not Before: Dec 31 16:00:00 2015 GMT
            Not After : Dec 30 16:00:00 2035 GMT
        Subject: C = CN, O = GMSSL, OU = PKI/RSA, CN = MiddleCA for Test
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                Public-Key: (2048 bit)
                Modulus:
                    00:89:7c:66:3e:7f:2e:76:56:91:63:93:74:51:e6:
                    2f:4f:19:54:1d:69:5f:f7:01:fb:61:6b:a3:fa:0e:
                    04:39:b0:3e:82:f3:64:f2:b0:f9:ba:d7:aa:6b:65:
                    3a:d0:d9:36:9a:c7:26:2d:8d:5f:ad:4d:c4:24:cb:
                    08:c3:9e:23:07:2b:c9:84:67:17:f4:ef:67:fb:c2:
                    69:60:c4:f0:ff:f9:ff:6a:4c:14:b0:a4:71:61:40:
                    4e:51:74:cb:a1:0f:be:38:85:43:fe:d6:ae:12:d2:
                    b7:a1:bb:83:2a:75:e1:4f:dc:f5:c6:b0:7b:50:8e:
                    bc:e0:8d:60:71:ac:69:eb:bd:be:43:b3:f5:82:e1:
                    d4:20:69:92:90:49:8e:75:b7:16:e8:98:b8:db:5e:
                    df:b1:07:19:b0:21:34:f3:91:57:16:38:a1:08:2a:
                    17:dd:c1:4b:06:0c:5d:6a:5a:d2:b7:bb:90:ef:a8:
                    bb:af:e7:0b:5a:b7:69:c7:09:93:82:f7:be:b6:5d:
                    99:d0:f0:e4:85:5f:97:34:72:8f:47:0f:ec:f7:52:
                    3e:fc:8b:f1:84:10:3a:f8:9e:9a:89:03:fa:78:d0:
                    a6:b6:d1:2f:f2:d6:ef:c0:21:39:4b:78:09:6d:46:
                    02:1a:32:13:da:93:53:85:f0:88:61:27:6e:66:55:
                    a2:89
                Exponent: 65537 (0x10001)
        X509v3 extensions:
            X509v3 Authority Key Identifier:
                2F:DA:D1:29:78:08:28:90:1D:D9:68:20:50:43:D2:6F
            X509v3 Subject Key Identifier:
                F3:34:A5:DC:29:CC:11:66:F5:F6:62:93:72:C5:6F:9B
            X509v3 Basic Constraints: critical
                CA:TRUE
            X509v3 Key Usage: critical
                Digital Signature, Certificate Sign, CRL Sign
    Signature Algorithm: sha256WithRSAEncryption
    Signature Value:
        01:86:64:4b:43:e0:84:03:39:44:79:23:bd:c6:23:de:03:2e:
        0d:68:9a:dd:52:32:76:ab:e9:9f:98:e1:70:a5:f9:2f:c3:86:
        60:d1:03:4a:aa:78:4f:e6:90:16:38:fb:e1:2e:0b:e0:20:48:
        ac:0d:48:b5:62:64:1e:d4:ff:cd:d7:84:00:cb:cc:66:71:3b:
        b4:33:5b:17:cf:20:79:07:0a:95:40:e9:68:76:5e:38:13:f3:
        ce:ee:d2:00:bb:89:c1:eb:54:f8:c4:2b:f5:66:61:6b:ec:8d:
        98:eb:b8:90:b3:30:af:ba:cf:86:28:52:c5:c7:87:66:e7:ab:
        56:ec:e1:ab:d1:ca:14:b0:61:52:b6:8e:ad:fd:1f:84:ee:91:
        0c:4d:45:db:6b:18:e0:7b:dc:ae:ff:a3:85:52:ae:c7:f8:94:
        cc:d4:fb:f8:64:75:f5:64:a3:7b:c6:67:18:9e:1f:44:51:f0:
        4d:4a:f4:00:69:d4:ab:fc:9a:8b:52:ff:82:29:76:70:03:26:
        93:ae:e9:fd:0f:49:0e:a3:3b:5e:5a:c3:b4:67:4b:6e:2e:ea:
        68:84:dc:63:13:b9:d8:06:ba:28:eb:50:ab:54:9f:b8:a9:22:
        d8:41:66:c7:dc:b1:89:4f:c5:74:3d:41:f1:f0:e6:bd:2d:08:
        2e:ea:cc:1a

1. 证书基本信息
Version: 3 (0x2)
表示这是一个 X.509 v3 证书。
Serial Number: 1591942200409 (0x172a7263c59)
证书的唯一序列号，由颁发机构生成。
Signature Algorithm: sha256WithRSAEncryption
表示使用 SHA-256 哈希算法和 RSA 加密算法对证书进行签名。

2. 颁发者信息 (Issuer)
Issuer: C = CN, O = GMSSL, OU = PKI/RSA, CN = RootCA for Test
颁发该证书的证书颁发机构的名称，包括国家 (C)、组织 (O)、组织单位 (OU) 和通用名称 (CN)。

3. 有效期 (Validity)
Not Before: Dec 31 16:00:00 2015 GMT
证书的生效时间。
Not After: Dec 30 16:00:00 2035 GMT
证书的过期时间。

4. 主题信息 (Subject)
Subject: C = CN, O = GMSSL, OU = PKI/RSA, CN = MiddleCA for Test
该证书所代表的实体的信息，包括国家、组织、组织单位和通用名称。

5. 主题公钥信息 (Subject Public Key Info)
Public Key Algorithm: rsaEncryption
表示使用 RSA 算法进行公钥加密。
Public-Key: (2048 bit)
公钥的位数，2048 位是当前推荐的安全级别。
Modulus:
大整数的模数，分为多行显示。它是 RSA 算法中的一个重要参数。
Exponent: 65537 (0x10001)
RSA 公钥的指数，常用的值为 65537。

6. X.509 v3 扩展
X509v3 Authority Key Identifier:
2F:DA:D1:29:78:08:28:90:1D:D9:68:20:50:43:D2:6F
用于标识颁发该证书的 CA 的公钥。
X509v3 Subject Key Identifier:
F3:34:A5:DC:29:CC:11:66:F5:F6:62:93:72:C5:6F:9B
用于标识该证书所持有的公钥。
X509v3 Basic Constraints: critical CA:TRUE
标记该证书为 CA 证书，表示它可以用于签署其他证书。critical 表示如果不支持此扩展，证书将被视为无效。
X509v3 Key Usage: critical Digital Signature, Certificate Sign, CRL Sign
指定该证书的用途，包括数字签名、证书签署和证书撤销列表签署。同样，critical 表示如果不支持此扩展，证书将被视为无效。

7. 签名信息
Signature Algorithm: sha256WithRSAEncryption
表示用于签名的算法，跟之前的签名算法一致。
Signature Value:
这是证书的签名值，以十六进制格式表示。它用于验证证书的完整性和真实性。



（二）证书链（理解证书的最关键一点）
0 证书链（这里也体现了证书的不同类型）：根证书（自签名证书，在ca也在浏览器的信任存储里）->中间证书（可以有多个以加强安全性，ca签发后会将生成的中间证书给到用户，在ca也会有保存）->用户证书（ca签发后会给到用户，在ca也会有保存）
注意：要认识到不同类型的证书及其私钥所在的位置：
（0）根证书在CA和验证方信任存储，私钥在CA；
（1）中间证书在CA和被验证方，会传到验证方，私钥在CA；
（2）用户证书由CA签发，在被验证方，会传到验证方，私钥在用户（也就是被验证方）。

注意：理解下面的关键就是X509结构的内容。

1 签发（位置在CA）：CA的上级证书使用其私钥给下级证书签名。

2 验证（位置在用户，比如浏览器）这里有一个重要问题：验证到底是验证什么呢？在验证证书的有效性。何为有效性：
（0）有效期：证书里就会带有效期，检查一下；
（1）验签：浏览器在第二次握手拿到证书链后，上一级证书给本级证书验签，直到需要根证书或者某个被储备的中间证书给第二次握手拿到的证书链最高一级证书签名时，浏览器会根据要验签证书中的Issuer的CN字段去信任存储里找是否存在该CN的证书；
（2）证书状态（有些文档也会把“证书状态”叫“有效性”）：在CRL和OCSP中查询改正是否被撤销。



（三）一些杂项
0 如何在Windows下查看和配置受信任的证书：Win + R，certmgr.msc。

1 证书的后缀名一般写成.crt、.cer、.pem，其中，.cer和.pem是openssl规定的任何密码学文件的标准二进制和文本格式。

